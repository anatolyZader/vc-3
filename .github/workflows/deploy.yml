name: Full deploy

on:
  push:
    branches: [amber]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
      GCP_PROJECT: eventstorm-1
      REGION: me-west1
      GCP_BUCKET: eventstorm-bucket
      REDIS_HOST: 10.187.8.27

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Authenticate with GCP
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GCP_PROJECT }}

    - name: Debug GCP Auth
      run: |
        gcloud auth list
        gcloud config list
        gsutil ls gs://$GCP_BUCKET/

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'

    # --- FRONTEND: Build & Upload ---
    - name: Build React client
      run: |
        cd client
        npm ci
        npm run build

    - name: Clear bucket
      run: |
        gsutil -m rm -r gs://$GCP_BUCKET/** || true

    - name: Upload static files
      run: |
        gsutil -m rsync -r ./client/dist gs://$GCP_BUCKET/

    # --- BACKEND: Build & Deploy ---
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Deploy backend to Cloud Run
      run: |
        cd backend
        gcloud run deploy eventstorm-backend \
          --source . \
          --region $REGION \
          --project $GCP_PROJECT \
          --platform managed \
          --vpc-connector=cr-vpc-conn \
          --allow-unauthenticated \
          --set-secrets=USER_OAUTH2_CREDENTIALS=google-creds:latest \
          --set-env-vars=NODE_ENV=production,REDIS_PORT=6379,PG_USER=postgres,PG_DATABASE=eventstorm_db,JWT_EXPIRE_IN=1h,REDIS_HOST=$REDIS_HOST,CLOUD_SQL_CONNECTION_NAME=eventstorm-1:me-west1:eventstorm-pg-instance,DUMMY=MUDDYY \
          --set-secrets=JWT_SECRET=jwt-secret:latest,GCP_OAUTH2_CLIENT_SECRET=google-oauth2-secret:latest,PG_PASSWORD=pg-pwd:latest,COOKIE_SECRET=cookie-secret:latest,SESSION_SECRET=session-secret:latest,GITHUB_TOKEN=github-token:latest

    # --- TRIGGER FETCH & PERSIST via Pub/Sub ---
    - name: Install jq for JSON templating
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Publish fetchRepoRequest event
      env:
        TOPIC: git-topic
        USER_ID: ${{ github.actor }}
        REPO_ID: ${{ github.repository }}
        CORRELATION: ${{ github.run_id }}
      run: |
        PAYLOAD=$(jq -n \
          --arg event "fetchRepoRequest" \
          --arg userId "$USER_ID" \
          --arg repoId "$REPO_ID" \
          --arg corr "$CORRELATION" \
          '{ event: $event, payload: { userId: $userId, repoId: $repoId, correlationId: $corr } }'
        )
        gcloud pubsub topics publish "$TOPIC" --message="$PAYLOAD"

    - name: Publish fetchWikiRequest event
      env:
        TOPIC: wiki-topic
        USER_ID: ${{ github.actor }}
        REPO_ID: ${{ github.repository }}
        CORRELATION: ${{ github.run_id }}
      run: |
        PAYLOAD=$(jq -n \
          --arg event "fetchWikiRequest" \
          --arg userId "$USER_ID" \
          --arg repoId "$REPO_ID" \
          --arg corr "$CORRELATION" \
          '{ event: $event, payload: { userId: $userId, repoId: $repoId, correlationId: $corr } }'
        )
        gcloud pubsub topics publish "$TOPIC" --message="$PAYLOAD"

    # --- GENERATE & SAVE YOUR OPENAPI SPEC ---
    - name: Generate OpenAPI spec file
      working-directory: backend
      run: |
        # this should write openapi.json (or .yaml) into backend/
        npm run generate:openapi

    - name: Publish fetchHttpApiRequest event
      env:
        TOPIC: api-topic
        USER_ID: ${{ github.actor }}
        REPO_ID: ${{ github.repository }}
        CORRELATION: ${{ github.run_id }}
      run: |
        PAYLOAD=$(jq -n \
          --arg event "fetchHttpApiRequest" \
          --arg userId "$USER_ID" \
          --arg repoId "$REPO_ID" \
          --arg corr "$CORRELATION" \
          '{ event: $event, payload: { userId: $userId, repoId: $repoId, correlationId: $corr } }'
        )
        gcloud pubsub topics publish "$TOPIC" --message="$PAYLOAD"
