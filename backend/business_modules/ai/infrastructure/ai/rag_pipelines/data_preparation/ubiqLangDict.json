 {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "EventStorm.me Ubiquitous Language Dictionary",
  "description": "DDD-based terminology dictionary for the EventStorm.me developer toolkit platform",
  "version": "1.0.0",
  "lastUpdated": "2025-08-24",
  "domains": {
    "core": {
      "name": "Core Domain",
      "description": "The primary business domain of EventStorm.me - intelligent developer toolkit and automation platform",
      "boundedContexts": [
        "chat",
        "ai",
        "git",
        "docs",
        "api",
        "requirements",
        "monitoring",
        "pm"
      ]
    }
  },
  "architecture": {
    "patterns": [
      {
        "name": "Hexagonal Architecture",
        "description": "Ports and Adapters pattern for isolating business logic",
        "aliases": ["Ports and Adapters"]
      },
      {
        "name": "Domain-Driven Design",
        "description": "Business-centric modeling and clear bounded contexts",
        "aliases": ["DDD"]
      },
      {
        "name": "Modular Monolith",
        "description": "Monolithic deployment with modular internal architecture",
        "aliases": ["Modular Architecture"]
      },
      {
        "name": "Event-Driven Architecture",
        "description": "Asynchronous communication via domain events and Pub/Sub",
        "aliases": ["EDA", "Event Sourcing"]
      }
    ],
    "layers": [
      {
        "name": "domain",
        "description": "Core business logic, entities, value objects, domain services",
        "responsibilities": ["Business rules", "Domain entities", "Value objects", "Domain events"]
      },
      {
        "name": "application",
        "description": "Use cases, application services, orchestration layer",
        "responsibilities": ["Use case coordination", "Transaction management", "Application services"]
      },
      {
        "name": "infrastructure", 
        "description": "Technical adapters, databases, external services",
        "responsibilities": ["Database adapters", "External APIs", "Messaging", "File system"]
      },
      {
        "name": "input",
        "description": "Entry points, HTTP routes, schemas, controllers",
        "responsibilities": ["HTTP endpoints", "Request validation", "Input schemas"]
      },
      {
        "name": "aop",
        "description": "Aspect-oriented programming, cross-cutting concerns",
        "responsibilities": ["Authentication", "Logging", "Error handling", "Authorization"]
      }
    ]
  },
  "businessModules": {
    "chat": {
      "name": "Chat Module",
      "description": "Central fa√ßade for user interactions and conversations",
      "role": "Core orchestrator and user interface",
      "boundedContext": "Conversational AI Interface",
      "entities": [
        {
          "name": "Conversation",
          "description": "Chat session between user and AI system",
          "attributes": ["conversationId", "userId", "messages", "createdAt", "updatedAt"],
          "behaviors": ["startConversation", "addQuestion", "addAnswer", "deleteConversation", "renameConversation"]
        }
      ],
      "valueObjects": [
        {
          "name": "QuestionContent",
          "description": "User's question or prompt content",
          "attributes": ["content"],
          "invariants": ["Must be non-empty string", "Must be trimmed"]
        }
      ],
      "aggregateRoots": ["Conversation"],
      "domainEvents": [
        {
          "name": "ConversationStartedEvent",
          "description": "Triggered when user initiates a new conversation",
          "attributes": ["userId", "conversationId", "title", "occurredAt"]
        },
        {
          "name": "QuestionAddedEvent", 
          "description": "User adds a question to conversation",
          "attributes": ["userId", "conversationId", "prompt", "occurredAt"]
        },
        {
          "name": "AnswerAddedEvent",
          "description": "AI system provides answer to user question",
          "attributes": ["userId", "conversationId", "answer", "occurredAt"]
        },
        {
          "name": "ConversationDeletedEvent",
          "description": "User deletes a conversation",
          "attributes": ["userId", "conversationId", "occurredAt"]
        }
      ]
    },
    "ai": {
      "name": "AI Module", 
      "description": "Core intelligence unit with RAG and LangChain integration",
      "role": "Knowledge synthesis and intelligent responses",
      "boundedContext": "Artificial Intelligence and Knowledge Management",
      "entities": [
        {
          "name": "AIResponse",
          "description": "AI-generated response to user prompts",
          "attributes": ["responseId", "userId", "conversationId", "content", "metadata"],
          "behaviors": ["generateResponse", "processContext"]
        },
        {
          "name": "PushedRepo",
          "description": "Repository processing for knowledge embedding",
          "attributes": ["userId", "repoId", "repoData"],
          "behaviors": ["processPushedRepo"]
        }
      ],
      "valueObjects": [
        {
          "name": "UserId", 
          "description": "Unique identifier for system users",
          "attributes": ["value"],
          "invariants": ["Must be valid UUID or string format"]
        },
        {
          "name": "RepoId",
          "description": "Unique identifier for code repositories", 
          "attributes": ["value"],
          "invariants": ["Must be non-empty string"]
        },
        {
          "name": "Prompt",
          "description": "User's input prompt for AI processing",
          "attributes": ["content", "context"],
          "invariants": ["Must be non-empty", "Must be valid text"]
        }
      ],
      "aggregateRoots": ["AIResponse", "PushedRepo"],
      "domainEvents": [
        {
          "name": "AiResponseGeneratedEvent",
          "description": "AI system generates response to user query",
          "attributes": ["userId", "conversationId", "response", "occurredAt"]
        },
        {
          "name": "RepoPushedEvent",
          "description": "Repository data processed and embedded",
          "attributes": ["userId", "repoId", "repoData", "occurredAt"]
        }
      ],
      "services": [
        {
          "name": "RAG Pipeline",
          "description": "Retrieval-Augmented Generation system for contextual responses",
          "components": ["Vector Store", "Embeddings", "Semantic Search", "Context Retrieval"]
        },
        {
          "name": "Semantic Preprocessor",
          "description": "Enhances document chunks with semantic context before embedding",
          "capabilities": ["Role detection", "Layer identification", "Module detection", "Complexity assessment"]
        }
      ]
    },
    "git": {
      "name": "Git Module",
      "description": "Repository analysis and GitHub integration",
      "role": "Source code management and analysis",
      "boundedContext": "Version Control and Repository Management", 
      "entities": [
        {
          "name": "GitProject",
          "description": "User's development project container",
          "attributes": ["userId", "projectId", "title", "repositories", "createdAt"],
          "behaviors": ["create", "addRepository", "removeRepository"]
        },
        {
          "name": "Repository",
          "description": "Git repository with metadata and content",
          "attributes": ["userId", "repoId", "metadata"],
          "behaviors": ["fetchRepo", "fetchDocs", "analyzeStructure"]
        }
      ],
      "valueObjects": [
        {
          "name": "ProjectId",
          "description": "Unique identifier for user projects",
          "attributes": ["value"],
          "invariants": ["Must be valid UUID string"]
        },
        {
          "name": "UserId",
          "description": "User identifier for git operations", 
          "attributes": ["value"],
          "invariants": ["Must be non-empty string"]
        },
        {
          "name": "RepoId",
          "description": "Repository identifier",
          "attributes": ["value"], 
          "invariants": ["Must be non-empty string"]
        }
      ],
      "aggregateRoots": ["GitProject", "Repository"],
      "domainEvents": [
        {
          "name": "ProjectCreatedEvent",
          "description": "New project created by user",
          "attributes": ["userId", "projectId", "title", "occurredAt"]
        },
        {
          "name": "RepoFetchedEvent", 
          "description": "Repository data fetched from GitHub",
          "attributes": ["userId", "repoId", "repo", "occurredAt"]
        }
      ]
    },
    "api": {
      "name": "API Module",
      "description": "HTTP API specification management and OpenAPI integration",
      "role": "API documentation and endpoint awareness",
      "boundedContext": "API Specification and Documentation",
      "entities": [
        {
          "name": "HttpApi",
          "description": "HTTP API specification for a repository",
          "attributes": ["userId", "repoId", "specification"],
          "behaviors": ["fetchHttpApi", "parseSpec", "validateEndpoints"]
        }
      ],
      "valueObjects": [
        {
          "name": "RepoId",
          "description": "Repository identifier for API operations",
          "attributes": ["value"],
          "invariants": ["Must be non-empty string"]
        },
        {
          "name": "HttpApiSpec",
          "description": "OpenAPI/Swagger specification object",
          "attributes": ["value"],
          "invariants": ["Must be valid OpenAPI JSON/YAML"]
        }
      ],
      "aggregateRoots": ["HttpApi"],
      "domainEvents": [
        {
          "name": "HttpApiFetchedEvent",
          "description": "API specification fetched from repository",
          "attributes": ["userId", "repoId", "spec", "occurredAt"]
        },
        {
          "name": "HttpApiSavedEvent",
          "description": "API specification persisted to storage",
          "attributes": ["userId", "repoId", "spec", "occurredAt"]
        }
      ]
    },
    "docs": {
      "name": "Docs Module",
      "description": "Knowledge management and documentation generation",
      "role": "Documentation and knowledge base",
      "boundedContext": "Knowledge Management and Documentation",
      "entities": [
        {
          "name": "Docs",
          "description": "Collection of documentation for a project",
          "attributes": ["docsId", "userId", "repoId", "pages"],
          "behaviors": ["createDocs", "addPage", "updateContent"]
        },
        {
          "name": "DocsPage", 
          "description": "Individual documentation page",
          "attributes": ["pageId", "title", "content", "metadata"],
          "behaviors": ["updateContent", "addMetadata"]
        }
      ],
      "valueObjects": [
        {
          "name": "DocsContent",
          "description": "Textual content of docs pages",
          "attributes": ["content"],
          "invariants": ["Must be valid text content"]
        }
      ],
      "aggregateRoots": ["Docs"],
      "domainEvents": [
        {
          "name": "DocsCreatedEvent",
          "description": "New docs created for project",
          "attributes": ["userId", "docsId", "repoId", "occurredAt"]
        },
        {
          "name": "DocsPageUpdatedEvent",
          "description": "Docs page content updated",
          "attributes": ["docsId", "pageId", "content", "occurredAt"]
        }
      ]
    },
    "auth": {
      "name": "Authentication Module",
      "description": "Cross-cutting authentication and authorization",
      "role": "Security and user management",
      "boundedContext": "Identity and Access Management",
      "type": "AOP Module",
      "entities": [
        {
          "name": "Account",
          "description": "User account with profile and preferences",
          "attributes": ["accountId", "userId", "accountType", "videos", "createdAt"],
          "behaviors": ["createAccount", "fetchAccountDetails", "addVideo", "removeVideo"]
        },
        {
          "name": "User",
          "description": "System user with authentication data",
          "attributes": ["userId", "username", "email", "roles"],
          "behaviors": ["getUserInfo", "registerUser", "removeUser", "addRole", "removeRole"]
        },
        {
          "name": "Session",
          "description": "User session management",
          "attributes": ["sessionId", "userId", "createdAt", "expiresAt"],
          "behaviors": ["setSessionInMem", "validateSession", "logout"]
        }
      ],
      "valueObjects": [
        {
          "name": "Email",
          "description": "User email address",
          "attributes": ["value"],
          "invariants": ["Must be valid email format"]
        },
        {
          "name": "Role", 
          "description": "User authorization role",
          "attributes": ["name", "permissions"],
          "invariants": ["Must be predefined role"]
        }
      ],
      "aggregateRoots": ["Account", "User", "Session"],
      "domainEvents": [
        {
          "name": "UserRegisteredEvent",
          "description": "New user registered in system",
          "attributes": ["userId", "email", "username", "occurredAt"]
        },
        {
          "name": "SessionCreatedEvent",
          "description": "User session established",
          "attributes": ["sessionId", "userId", "occurredAt"]
        }
      ]
    }
  },
  "technicalTerms": {
    "rag": {
      "name": "RAG (Retrieval-Augmented Generation)",
      "description": "AI technique combining information retrieval with text generation",
      "components": ["Vector Store", "Embeddings", "Similarity Search", "Language Model"],
      "purpose": "Provide contextual, accurate responses using external knowledge"
    },
    "langchain": {
      "name": "LangChain",
      "description": "Framework for developing applications powered by language models",
      "usage": "Orchestrating AI workflows, managing prompts, chaining operations"
    },
    "pinecone": {
      "name": "Pinecone",
      "description": "Vector database for similarity search and retrieval",
      "usage": "Storing and retrieving document embeddings for RAG system"
    },
    "fastify": {
      "name": "Fastify",
      "description": "Fast and low overhead web framework for Node.js",
      "usage": "Backend API server and plugin architecture"
    },
    "pubsub": {
      "name": "Google Cloud Pub/Sub",
      "description": "Asynchronous messaging service for event-driven architecture",
      "usage": "Inter-module communication and event distribution"
    },
    "embeddings": {
      "name": "Embeddings",
      "description": "Vector representations of text for semantic similarity",
      "usage": "Converting documents to vectors for similarity search"
    }
  },
  "businessTerms": {
    "eventstorm": {
      "name": "EventStorm",
      "description": "The application name and approach - event storming for DDD",
      "aliases": ["eventstorm.me", "EventStorm.me"]
    },
    "videocode": {
      "name": "Videocode", 
      "description": "Previous name of the eventstorm.me application",
      "status": "deprecated"
    },
    "developer_toolkit": {
      "name": "Developer Toolkit",
      "description": "Suite of integrated tools for software development automation",
      "components": ["AI Assistant", "Code Analysis", "Documentation Generation", "API Management"]
    },
    "modular_monolith": {
      "name": "Modular Monolith", 
      "description": "Architecture pattern with modular internal structure but monolithic deployment",
      "benefits": ["Clear boundaries", "Simplified deployment", "Internal modularity"]
    },
    "bounded_context": {
      "name": "Bounded Context",
      "description": "DDD concept - explicit boundary where domain model is valid",
      "examples": ["Chat Context", "Git Context", "AI Context", "Auth Context"]
    }
  },
  "domainEvents": {
    "chat": [
      "ConversationStartedEvent",
      "QuestionAddedEvent", 
      "AnswerAddedEvent",
      "ConversationDeletedEvent"
    ],
    "ai": [
      "AiResponseGeneratedEvent",
      "RepoPushedEvent"
    ],
    "git": [
      "ProjectCreatedEvent",
      "RepoFetchedEvent"
    ],
    "api": [
      "HttpApiFetchedEvent",
      "HttpApiSavedEvent"
    ],
    "docs": [
      "DocsCreatedEvent", 
      "DocsPageUpdatedEvent"
    ],
    "auth": [
      "UserRegisteredEvent",
      "SessionCreatedEvent"
    ]
  },
  "ports": {
    "inbound": [
      {
        "name": "HTTP Routes",
        "description": "REST API endpoints for client communication",
        "examples": ["/chat", "/ai/prompt", "/git/repo", "/api/spec"]
      },
      {
        "name": "Pub/Sub Subscribers",
        "description": "Event listeners for inter-module communication", 
        "examples": ["questionAdded", "repoFetched", "apiSaved"]
      },
      {
        "name": "WebSocket Connections",
        "description": "Real-time bidirectional communication",
        "usage": "Live chat responses, real-time updates"
      }
    ],
    "outbound": [
      {
        "name": "Database Adapters",
        "description": "Persistence layer interfaces",
        "examples": ["IChatPersistPort", "IApiPersistPort", "IAuthPersistPort"]
      },
      {
        "name": "External API Adapters",
        "description": "Third-party service integrations",
        "examples": ["GitHub API", "OpenAI API", "Jira API"]
      },
      {
        "name": "Messaging Adapters", 
        "description": "Event publishing interfaces",
        "examples": ["EventDispatcher", "PubSub Publishers"]
      },
      {
        "name": "AI Service Adapters",
        "description": "AI and ML service interfaces",
        "examples": ["LangChain Adapter", "Vector Store Adapter"]
      }
    ]
  },
  "infrastructure": {
    "cloud": {
      "provider": "Google Cloud Platform",
      "services": [
        {
          "name": "Cloud Run",
          "usage": "Containerized backend deployment"
        },
        {
          "name": "Cloud SQL",
          "usage": "PostgreSQL database hosting"
        },
        {
          "name": "Cloud Pub/Sub",
          "usage": "Asynchronous messaging"
        },
        {
          "name": "Cloud Storage",
          "usage": "Static asset and file storage"
        },
        {
          "name": "Memorystore",
          "usage": "Redis caching layer"
        }
      ]
    },
    "databases": {
      "primary": {
        "type": "PostgreSQL",
        "usage": "Transactional data, user accounts, conversations"
      },
      "cache": {
        "type": "Redis", 
        "usage": "Session storage, temporary data, caching"
      },
      "vector": {
        "type": "Pinecone",
        "usage": "Document embeddings, similarity search"
      }
    }
  },
  "workflows": {
    "chat_flow": {
      "name": "Chat Interaction Workflow",
      "steps": [
        "User sends question",
        "Chat module publishes QuestionAddedEvent", 
        "AI module receives event",
        "AI performs RAG search",
        "AI generates response",
        "Response published as AnswerAddedEvent",
        "Chat module delivers to user"
      ]
    },
    "repo_analysis_flow": {
      "name": "Repository Analysis Workflow", 
      "steps": [
        "User connects repository",
        "Git module fetches repo data",
        "RepoFetchedEvent published",
        "AI module processes code",
        "Documents embedded in vector store",
        "Knowledge available for RAG queries"
      ]
    }
  },
  "patterns": {
    "aggregate": {
      "name": "Aggregate Pattern",
      "description": "DDD pattern for maintaining consistency boundaries",
      "examples": ["Conversation", "GitProject", "Account"]
    },
    "repository": {
      "name": "Repository Pattern", 
      "description": "Abstraction for data access logic",
      "examples": ["ChatPersistAdapter", "GitPersistAdapter"]
    },
    "adapter": {
      "name": "Adapter Pattern",
      "description": "Interface between application and external systems",
      "examples": ["GitHub Adapter", "OpenAI Adapter", "Database Adapters"]
    },
    "event_sourcing": {
      "name": "Event Sourcing",
      "description": "Storing state changes as sequence of events",
      "usage": "Domain events for audit trail and system state"
    }
  }
}
